How does the role based access stuff work:

This code is handling user authentication and management in an Express.js 
application. It uses bcrypt for password hashing and jsonwebtoken (jwt) 
for creating tokens for authenticated users. Here's how it works:

Signup: When a POST request is made to the "/signup" route, the application 
first checks if the email provided in the request body already exists in the 
database. If it does, it sends a response indicating that the email already 
exists. If not, it hashes the password provided in the request body using 
bcrypt and creates a new user with the hashed password and the provided email. 
This new user is then inserted into the database.

Login: When a POST request is made to the "/login" route, the application 
first checks if the email provided in the request body exists in the database. 
If it doesn't, it sends a response indicating that the login failed. If the 
email does exist, it compares the password provided in the request body with 
the hashed password stored in the database using bcrypt. If the passwords 
match, it creates a JWT token with the user's email and id as the payload, 
signs it with a secret key ("somekey"), and sends it in the response. This 
token can be used for authenticating subsequent requests.

Delete User: When a DELETE request is made to the "/:userId" route, 
the application deletes the user with the id provided in the route parameters
 from the database.

Note: The secret key used for signing the JWT token is hardcoded as "somekey". 
In a real-world application, this should be replaced with a secure, randomly 
generated key that is stored securely and not included directly in the code.